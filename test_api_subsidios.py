#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para el API de beneficios-cultivos.
Simula llamadas al endpoint y muestra los resultados.
"""
import os
import sys
import json
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append('.')

# Cargar variables de entorno desde .env (ya se hace autom√°ticamente en DatabaseConnection)

def test_api_completo():
    """Prueba el an√°lisis completo sin filtros."""
    print("="*60)
    print("üî¨ PRUEBA API COMPLETO (SIN FILTROS)")
    print("="*60)
    
    try:
        from api.services_subsidios import BeneficiosCultivosService
        service = BeneficiosCultivosService()
        
        resultado = service.obtener_analisis_completo()
        
        print(f"üìÖ Fecha consulta: {resultado.fecha_consulta}")
        print(f"üåæ Total hect√°reas: {resultado.resumen.total_hectareas_impactadas:,.2f} ha")
        print(f"üéØ Total beneficios: {resultado.resumen.total_beneficios_otorgados:,}")
        print(f"üí∞ Inversi√≥n GAD: ${resultado.resumen.inversion_total_gad:,.2f}")
        
        print("\nüìä HECT√ÅREAS SUBSIDIADAS:")
        for h in resultado.hectareas_subsidiadas:
            print(f"  ‚Ä¢ {h.cultivo.value} - {h.tipo_beneficio.value}: {h.total_hectareas:,.2f} ha ({h.num_beneficios:,} beneficios)")
        
        print("\nüíµ COSTOS DE PRODUCCI√ìN (por hect√°rea):")
        for c in resultado.costos_produccion:
            print(f"  ‚Ä¢ {c.cultivo.value}: ${c.costo_total_sin_subsidio:.2f}")
            print(f"    - Directos: ${c.costos_directos:.2f}")
            print(f"    - Indirectos: ${c.costos_indirectos:.2f}")
        
        print("\nüí∏ MONTOS SUBSIDIOS:")
        for m in resultado.montos_subsidios:
            if m.monto_total_entregado > 0:
                print(f"  ‚Ä¢ {m.cultivo.value} - {m.tipo_beneficio.value}: ${m.monto_total_entregado:,.2f}")
                print(f"    - Por hect√°rea (matriz): ${m.monto_matriz_por_hectarea:.2f}")
        
        print("\nüìâ REDUCCI√ìN DE COSTOS:")
        for r in resultado.reduccion_costos:
            print(f"  ‚Ä¢ {r.cultivo.value}:")
            print(f"    - Costo sin subsidio: ${r.costo_produccion_sin_subsidio:,.2f}")
            print(f"    - Reducci√≥n por subsidios: ${r.reduccion_por_subsidios:,.2f}")
            print(f"    - Costo con subsidio: ${r.costo_produccion_con_subsidio:,.2f}")
            print(f"    - % Reducci√≥n: {r.porcentaje_reduccion:.2f}%")
        
        print("\nüéØ FILTROS DISPONIBLES:")
        print(f"  ‚Ä¢ Cultivos: {[c.value for c in resultado.filtros.cultivos_disponibles]}")
        print(f"  ‚Ä¢ Beneficios: {[b.value for b in resultado.filtros.beneficios_disponibles]}")
        
        print("\n‚úÖ PRUEBA COMPLETA EXITOSA")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_api_filtrado():
    """Prueba el API con filtros."""
    print("\n" + "="*60)
    print("üîç PRUEBA API CON FILTROS")
    print("="*60)
    
    try:
        from api.services_subsidios import BeneficiosCultivosService
        service = BeneficiosCultivosService()
        
        # Filtro por cultivo
        print("\nüåæ FILTRO: Solo ARROZ")
        resultado_arroz = service.obtener_analisis_completo(filtro_cultivo='ARROZ')
        print(f"  - Hect√°reas ARROZ: {sum(h.total_hectareas for h in resultado_arroz.hectareas_subsidiadas):,.2f}")
        
        # Filtro por beneficio
        print("\nüå± FILTRO: Solo SEMILLAS")
        resultado_semillas = service.obtener_analisis_completo(filtro_beneficio='SEMILLAS')
        print(f"  - Hect√°reas SEMILLAS: {sum(h.total_hectareas for h in resultado_semillas.hectareas_subsidiadas):,.2f}")
        
        # Filtro combinado
        print("\nüåæüå± FILTRO: ARROZ + SEMILLAS")
        resultado_combo = service.obtener_analisis_completo(filtro_cultivo='ARROZ', filtro_beneficio='SEMILLAS')
        if resultado_combo.hectareas_subsidiadas:
            h = resultado_combo.hectareas_subsidiadas[0]
            print(f"  - {h.cultivo.value} + {h.tipo_beneficio.value}: {h.total_hectareas:,.2f} ha")
        
        print("\n‚úÖ PRUEBA FILTRADA EXITOSA")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def mostrar_resumen_tecnico():
    """Muestra un resumen t√©cnico de la implementaci√≥n."""
    print("\n" + "="*60)
    print("üìã RESUMEN T√âCNICO DE LA IMPLEMENTACI√ìN")
    print("="*60)
    
    print("""
‚úÖ IMPLEMENTACI√ìN COMPLETADA:

1Ô∏è‚É£ HECT√ÅREAS SUBSIDIADAS:
   ‚Ä¢ Query BD para obtener hect√°reas por cultivo y beneficio
   ‚Ä¢ Datos de ARROZ y MA√çZ con SEMILLAS, FERTILIZANTES, MECANIZACI√ìN
   ‚Ä¢ Total: ~92,905 hect√°reas impactadas

2Ô∏è‚É£ COSTOS DE PRODUCCI√ìN (matrices):
   ‚Ä¢ ARROZ: $1,590.99/ha (sin subsidios)
   ‚Ä¢ MA√çZ: $1,835.30/ha (sin subsidios) 
   ‚Ä¢ Desglose por categor√≠as (SEMILLA, FERTILIZANTE, MAQUINARIA, etc.)

3Ô∏è‚É£ MONTOS SUBSIDIOS ENTREGADOS:
   ‚Ä¢ Datos reales de BD ($3,932,628.52 total)
   ‚Ä¢ Mecanizaci√≥n usa valores espec√≠ficos de matriz
   ‚Ä¢ Mapeo correcto BD ‚Üí Categor√≠as matriz

4Ô∏è‚É£ REDUCCI√ìN TOTAL DE COSTOS:
   ‚Ä¢ Resta directa: Costo sin subsidio - Montos entregados
   ‚Ä¢ No usa rec√°lculo din√°mico de indirectos (seg√∫n especificaci√≥n)
   ‚Ä¢ C√°lculo por cultivo agregado

5Ô∏è‚É£ FILTROS IMPLEMENTADOS:
   ‚Ä¢ Por tipo cultivo (ARROZ, MA√çZ)
   ‚Ä¢ Por tipo subvenci√≥n (SEMILLAS, FERTILIZANTES, MECANIZACI√ìN)
   ‚Ä¢ Combinaciones v√°lidas disponibles para frontend

üì° ENDPOINT: GET /produ/beneficios-cultivos
   ‚Ä¢ Query params: ?cultivo=ARROZ&beneficio=SEMILLAS
   ‚Ä¢ Response: JSON estructurado con toda la informaci√≥n
   ‚Ä¢ Validaci√≥n de par√°metros
   ‚Ä¢ Manejo de errores

üîß ARQUITECTURA:
   ‚Ä¢ Models (Pydantic): api/models_subsidios.py
   ‚Ä¢ Services (L√≥gica): api/services_subsidios.py  
   ‚Ä¢ Endpoint: api/main.py
   ‚Ä¢ Matrices: src/matriz_costos/costos_*.py
   ‚Ä¢ BD: PostgreSQL con schema 'etl-productivo'

üê≥ ENTORNO DOCKER + KONG:
   ‚Ä¢ API Gateway: Kong maneja enrutamiento y proxy
   ‚Ä¢ BD Connection: host.docker.internal (configurado en .env)
   ‚Ä¢ Networking: Comunicaci√≥n entre contenedores Docker
   ‚Ä¢ Config: Variables desde .env adaptadas para containerizaci√≥n
""")

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL API BENEFICIOS-CULTIVOS")
    print(f"‚è∞ {datetime.now()}")
    
    # Ejecutar pruebas
    success1 = test_api_completo()
    success2 = test_api_filtrado()
    
    # Mostrar resumen
    mostrar_resumen_tecnico()
    
    # Resultado final
    if success1 and success2:
        print("\nüéâ TODAS LAS PRUEBAS EXITOSAS - API LISTO PARA USO")
        print("\nüåê Para usar el API:")
        print("   üê≥ ENTORNO DOCKER + KONG (Producci√≥n):")
        print("      1. Verificar .env: OLTP_DB_HOST=host.docker.internal")
        print("      2. Activar entorno: source venv/bin/activate")
        print("      3. Iniciar servidor: python start_api.py")
        print("      4. Acceso v√≠a Kong Gateway (rutas configuradas)")
        print("   üíª DESARROLLO LOCAL (Opcional):")
        print("      1. Cambiar .env: OLTP_DB_HOST=localhost")
        print("      2. Activar entorno: source venv/bin/activate")
        print("      3. Iniciar: python start_api.py")
        print("      4. Acceder: http://localhost:8000/produ/beneficios-cultivos")
        print("      5. Docs: http://localhost:8000/docs")
    else:
        print("\n‚ùå ALGUNAS PRUEBAS FALLARON - REVISAR LOGS")